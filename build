#!/bin/bash

# Build and test metar.
# Run with no arguments to see the available commands.

metarDir="/home/coder/metar"

option=$1

# Make sure we're running inside the docker container.
if [[ -z "${coder_env}" ]]; then
  echo "Run in the docker container not on the host."
  exit
fi

# Make sure we are running in the metar folder.
if [[ ! $(pwd) == "$metarDir" ]]; then
  echo "Run from the metar folder: $metarDir"
  exit
fi

function buildCmd() {
  # Build the debug and release versions of metar.

  debugExe='bin/linux/debug/metar'
  rm $debugExe
  nim c --out:$debugExe metar/metar

  releaseExe='bin/linux/metar'
  rm $releaseExe
  nim c -d:release --out:$releaseExe metar/metar

  # Make sure the exes exists.
  if [[ ! -e $debugExe ]]; then
    echo "Error creating the debug exe: $debugExe"
  else
    echo "Created: $debugExe"
  fi
  if [[ ! -e $releaseExe ]]; then
    echo "Error creating the release exe: $releaseExe"
  else
    echo "Created: $releaseExe"
  fi

  exit
}

function testCmd() {
  # Test the debug and release versions of metar.

  # Run each test file in the test folder.
  for file in tests/test_*.nim; do
    basename=$(basename $file)

    debugCmd="nim c -f -d:nimDebugDlOpen --verbosity:0 -d:test --hints:off -r \
      -p:metar --out:bin/tests/$basename $file"
    echo
    echo $debugCmd
    $debugCmd

    releaseCmd="nim c -f -d:release -d:nimDebugDlOpen --verbosity:0 -d:test --hints:off -r \
      -p:metar --out:bin/tests/$basename $file"
    echo
    echo $releaseCmd
    $releaseCmd
  done

  exit
}

function docsCmd() {
  # Build all the docs.

  # Run each source file in the metar folder.
  for file in metar/*.nim; do
    basename=$(basename $file)
    # printf "$basename\t$file\n"
    # --hints:off

    cmd="nim doc -d:test --index:on --out:docs/html/$basename.html $file"
    echo $cmd
    $cmd
  done
}

function dotCmd() {
  # Create and show the metar modules dependency graph.

  # Create my.dot file with the contents of metar.dot after stripping
  # out nim modules.
  # --hints:off

  nim genDepend metar/metar.nim

  metarDot=metar/metar.dot
  if [[ -e $metarDot ]]; then
    echo "Created: $metarDot"
  else
    echo "Error creating: $metarDot"
    exit
  fi

  find metar -maxdepth 1 -name \*.nim | sed "s:metar/::" | sed "s:.nim::" >names.txt

  names=names.txt
  if [[ -e $names ]]; then
    echo "Created: $names"
  else
    echo "Error creating: $names"
    exit
  fi

  myDot=my.dot
  python3 python/dotMetar.py names.txt metar/metar.dot > $myDot
  if [[ -e $myDot ]]; then
    echo "Created: $myDot"
  else
    echo "Error creating: $myDot"
    exit
  fi

  svgFile=docs/html/dependencies.svg
  dot -Tsvg $myDot -o $svgFile
  if [[ -e $svgFile ]]; then
    echo "Created: $svgFile"
    echo "Open $svgFile in Firefox."
  else
    echo "Error creating: $svgFile"
    exit
  fi

  rm names.txt
  rm $myDot
  rm metar.deps
  rm metar/metar.dot
  rm metar/metar.png

}

function sanityCmd() {
  # Run metar on the test files.

  # Check the version number.
  versionNum=$(bin/linux/metar -v)
  if [[ ! "$versionNum" == "0.1.26" ]]; then
    echo "Invalid version number: $versionNum"
    exit
  fi

  # Check the help message.
  helpFile=help.txt
  bin/linux/metar > $helpFile
  if ! diff $helpFile testfiles/$helpFile >/dev/null 2>&1; then
    echo "Invalid help message."
    exit
  fi
  rm $helpFile

  # Check the jpg output
  jpgOutputFile=jpg-output.txt
  bin/linux/metar testfiles/image.jpg > $jpgOutputFile
  if ! diff $jpgOutputFile testfiles/$jpgOutputFile >/dev/null 2>&1; then
    echo "Invalid jpg output."
    exit
  fi
  rm $jpgOutputFile

  # Check the jpg json output
  jpgJsonFile=jpg-output.json
  bin/linux/metar -j testfiles/image.jpg > $jpgJsonFile
  if ! diff $jpgJsonFile testfiles/$jpgJsonFile >/dev/null 2>&1; then
    echo "Invalid jpg json output."
    exit
  fi
  rm $jpgJsonFile

  # Check the tiff output
  tiffOutputFile=tiff-output.txt
  bin/linux/metar testfiles/image.tif > $tiffOutputFile
  if ! diff $tiffOutputFile testfiles/$tiffOutputFile >/dev/null 2>&1; then
    echo "Invalid tiff output."
    exit
  fi
  rm $tiffOutputFile

  # Check the dng output
  dngOutputFile=dng-output.txt
  bin/linux/metar testfiles/image.dng > $dngOutputFile
  if ! diff $dngOutputFile testfiles/$dngOutputFile >/dev/null 2>&1; then
    echo "Invalid dng output."
    exit
  fi
  rm $dngOutputFile
}

case $option in
  b)
    buildCmd
    ;;
  t)
    testCmd
    ;;
  docs)
    docsCmd
    ;;
  dot)
    dotCmd
    ;;
  ts)
    sanityCmd
    ;;
  *)

cat << EOF
b         Build the debug and release versions of metar.
t         Test the debug and release versions of metar.
docs      Build all the docs.
dot       Build the dependency graph.
ts        Run metar sanity checks.
EOF
    ;;
esac
